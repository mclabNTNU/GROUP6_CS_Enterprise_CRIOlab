%implements s15_b0_31vde_Functions "C"

%function rt_urand_Upu32_Yd_f_pw_snf_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
uint32_T lo;
uint32_T hi;
/* Uniform random number generator (random number between 0 and 1)

#define IA      16807                      magic multiplier = 7^5
#define IM      2147483647                 modulus = 2^31-1
#define IQ      127773                     IM div IA
#define IR      2836                       IM modulo IA
#define S       4.656612875245797e-10      reciprocal of 2^31-1
test = IA * (seed %<"\% IQ) - IR * (seed/IQ)\
seed = test < 0 ? (test + IM) : test\
return (seed*S)\
"> */
lo = *u % 127773U * 16807U;
hi = *u / 127773U * 2836U;
if (lo < hi) {
    *u = 2147483647U - (hi - lo);
} else {
    *u = lo - hi;
}
return (real_T)*u * 4.6566128752457969E-10;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_urand_Upu32_Yd_f_pw_snf(\
%assign comma = ""
%<comma>uint32_T *u\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_nrand_Upu32_Yd_f_pw_snf_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T sr;
real_T si;
%assign _modelSS = ""

/* Normal (Gaussian) random number generator */
do {
%if SLibCG_FcnCallArgAccessed(1,1,0,0)
%<SLibCG_AccessArg(1 ,1, 0)>
%endif

    sr = 2.0 * %<(SLibCGCallSubFcn("rt_urand_Upu32_Yd_f_pw_snf", ["u"], 1, 1, 0))> - 1.0;
%if SLibCG_FcnCallArgAccessed(1,1,1,0)
%<SLibCG_AccessArg(1 ,1, 0)>
%endif

    si = 2.0 * %<(SLibCGCallSubFcn("rt_urand_Upu32_Yd_f_pw_snf", ["u"], 1, 1, 1))> - 1.0;
    si = sr * sr + si * si;
} while (si > 1.0);
y = sqrt(-2.0 * log(si) / si) * sr;
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_nrand_Upu32_Yd_f_pw_snf(\
%assign comma = ""
%if SLibCG_ArgAccessed(1, 1, 0)
%<comma>uint32_T *u\
%assign comma = ", "
%endif
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_atan2d_snf_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
int32_T u0_0;
int32_T u1_0;
if (rtIsNaN(u0) || rtIsNaN(u1)) {
    y = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
} else if (rtIsInf(u0) && rtIsInf(u1)) {
    if (u0 > 0.0) {
        u0_0 = 1;
    } else {
        u0_0 = -1;
    }
    if (u1 > 0.0) {
        u1_0 = 1;
    } else {
        u1_0 = -1;
    }
    y = atan2(u0_0, u1_0);
} else if (u1 == 0.0) {
    if (u0 > 0.0) {
        y = RT_PI / 2.0;
    } else if (u0 < 0.0) {
        y = -(RT_PI / 2.0);
    } else {
        y = 0.0;
    }
} else {
    y = atan2(u0, u1);
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_atan2d_snf(\
%assign comma = ""
%<comma>real_T u0\
%assign comma = ", "
%<comma>real_T u1\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 2, fcnProtoType)>
%return fcnBuff
%endfunction

